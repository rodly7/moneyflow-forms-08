import { supabase } from "@/integrations/supabase/client";
import { NotificationService } from "./notificationService";

export interface EnhancedNotificationData {
  id: string;
  title: string;
  message: string;
  priority: 'low' | 'normal' | 'high';
  notification_type: string;
  amount?: number;
  currency?: string;
  sender_name?: string;
  sender_phone?: string;
  recipient_phone?: string;
  transaction_id?: string;
  created_at: string;
}

export class EnhancedNotificationService extends NotificationService {
  
  // Cr√©er une notification de r√©ception d'argent avec priorit√© √©lev√©e
  static async createMoneyReceivedNotification(
    recipientUserId: string,
    amount: number,
    currency: string = 'XAF',
    senderName?: string,
    senderPhone?: string,
    recipientPhone?: string,
    transactionId?: string
  ) {
    console.log(`üí∞ Cr√©ation notification r√©ception argent: ${amount} ${currency} pour ${recipientUserId}`);
    
    const title = `üí∞ Argent re√ßu`;
    const message = senderName 
      ? `Vous avez re√ßu ${amount.toLocaleString()} ${currency} de ${senderName}${senderPhone ? ` (${senderPhone})` : ''}`
      : `Vous avez re√ßu ${amount.toLocaleString()} ${currency}`;

    try {
      // Cr√©er la notification avec des m√©tadonn√©es √©tendues
      const { data: notification, error: notificationError } = await supabase
        .from('notifications')
        .insert({
          title,
          message,
          priority: 'high',
          notification_type: 'transfer_received',
          target_users: [recipientUserId],
          sent_by: 'system',
          total_recipients: 1,
          metadata: {
            amount,
            currency,
            sender_name: senderName,
            sender_phone: senderPhone,
            recipient_phone: recipientPhone,
            transaction_id: transactionId,
            notification_category: 'financial',
            requires_action: false,
            auto_dismiss: false
          }
        })
        .select()
        .single();

      if (notificationError) {
        throw new Error(`Erreur notification: ${notificationError.message}`);
      }

      // Cr√©er l'entr√©e destinataire
      const { error: recipientError } = await supabase
        .from('notification_recipients')
        .insert({
          notification_id: notification.id,
          user_id: recipientUserId,
          status: 'sent'
        });

      if (recipientError) {
        // Nettoyer si √©chec
        await supabase.from('notifications').delete().eq('id', notification.id);
        throw new Error(`Erreur destinataire: ${recipientError.message}`);
      }

      console.log(`‚úÖ Notification argent re√ßu cr√©√©e: ${notification.id}`);
      
      return {
        success: true,
        message: "Notification de r√©ception d'argent envoy√©e",
        data: notification
      };

    } catch (error: any) {
      console.error('‚ùå Erreur notification argent re√ßu:', error);
      
      // Tentative de notification simplifi√©e en cas d'√©chec
      return await this.createAutoNotification(
        `üí∞ ${amount} ${currency} re√ßu`,
        `Votre compte a √©t√© cr√©dit√©`,
        'high',
        [recipientUserId],
        'system',
        true
      );
    }
  }

  // Cr√©er une notification de retrait
  static async createWithdrawalNotification(
    userId: string,
    amount: number,
    currency: string = 'XAF',
    status: 'created' | 'completed' | 'failed' = 'created',
    transactionId?: string
  ) {
    console.log(`üí∏ Cr√©ation notification retrait: ${amount} ${currency} pour ${userId}, statut: ${status}`);
    
    const isCompleted = status === 'completed';
    const title = isCompleted ? '‚úÖ Retrait confirm√©' : '‚è≥ Retrait initi√©';
    const message = isCompleted 
      ? `Votre retrait de ${amount.toLocaleString()} ${currency} a √©t√© trait√© avec succ√®s`
      : `Votre demande de retrait de ${amount.toLocaleString()} ${currency} a √©t√© cr√©√©e`;

    try {
      // Cr√©er la notification
      const { data: notification, error: notificationError } = await supabase
        .from('notifications')
        .insert({
          title,
          message,
          priority: isCompleted ? 'high' : 'normal',
          notification_type: isCompleted ? 'withdrawal_completed' : 'withdrawal_created',
          target_users: [userId],
          sent_by: 'system',
          total_recipients: 1,
          metadata: {
            amount,
            currency,
            transaction_id: transactionId,
            notification_category: 'financial',
            status,
            requires_action: false,
            auto_dismiss: false
          }
        })
        .select()
        .single();

      if (notificationError) {
        throw new Error(`Erreur notification: ${notificationError.message}`);
      }

      // Cr√©er l'entr√©e destinataire
      const { error: recipientError } = await supabase
        .from('notification_recipients')
        .insert({
          notification_id: notification.id,
          user_id: userId,
          status: 'sent'
        });

      if (recipientError) {
        // Nettoyer si √©chec
        await supabase.from('notifications').delete().eq('id', notification.id);
        throw new Error(`Erreur destinataire: ${recipientError.message}`);
      }

      console.log(`‚úÖ Notification retrait cr√©√©e: ${notification.id}`);
      
      return {
        success: true,
        message: "Notification de retrait envoy√©e",
        data: notification
      };

    } catch (error: any) {
      console.error('‚ùå Erreur notification retrait:', error);
      
      return {
        success: false,
        message: error.message || "Erreur lors de la cr√©ation de la notification de retrait"
      };
    }
  }

  // Envoyer une notification push native (si support√©)
  static async sendPushNotification(userId: string, notificationOptions: any) {
    try {
      // V√©rifier si les notifications push sont support√©es
      if (!('Notification' in window) || !('serviceWorker' in navigator)) {
        console.log('üîï Notifications push non support√©es');
        return;
      }

      // Demander la permission si n√©cessaire
      let permission = Notification.permission;
      if (permission === 'default') {
        permission = await Notification.requestPermission();
      }

      if (permission !== 'granted') {
        console.log('üîï Permission notifications refus√©e');
        return;
      }

      // V√©rifier si un service worker est enregistr√©
      const registration = await navigator.serviceWorker.ready;
      if (!registration) {
        console.log('üîï Service worker non disponible');
        return;
      }

      // Faire vibrer l'appareil si support√© (avant d'afficher la notification)
      if ('vibrate' in navigator) {
        navigator.vibrate([200, 100, 200, 100, 400]);
      }

      // Envoyer la notification push
      await registration.showNotification(notificationOptions.title, {
        body: notificationOptions.body,
        icon: notificationOptions.icon,
        badge: notificationOptions.badge,
        tag: notificationOptions.tag,
        requireInteraction: notificationOptions.requireInteraction,
        data: notificationOptions.data
      });

      console.log('üì± Notification push envoy√©e');

    } catch (error) {
      console.error('‚ùå Erreur notification push:', error);
    }
  }

  // R√©cup√©rer les notifications avec m√©tadonn√©es √©tendues
  static async getEnhancedNotifications(
    userId: string,
    limit: number = 20,
    offset: number = 0
  ) {
    try {
      const { data, error } = await supabase
        .from('notification_recipients')
        .select(`
          *,
          notifications (
            *,
            metadata
          )
        `)
        .eq('user_id', userId)
        .order('created_at', { ascending: false })
        .range(offset, offset + limit - 1);

      if (error) {
        throw new Error(`Erreur r√©cup√©ration notifications: ${error.message}`);
      }

      return {
        success: true,
        data: data || [],
        message: "Notifications r√©cup√©r√©es avec succ√®s"
      };

    } catch (error: any) {
      console.error('‚ùå Erreur r√©cup√©ration notifications:', error);
      return {
        success: false,
        message: error.message || "Erreur lors de la r√©cup√©ration des notifications"
      };
    }
  }

  // Marquer une notification comme lue
  static async markAsRead(notificationId: string, userId: string) {
    try {
      const { error } = await supabase
        .from('notification_recipients')
        .update({ 
          status: 'read',
          read_at: new Date().toISOString()
        })
        .eq('notification_id', notificationId)
        .eq('user_id', userId);

      if (error) {
        throw new Error(`Erreur marquage lu: ${error.message}`);
      }

      return {
        success: true,
        message: "Notification marqu√©e comme lue"
      };

    } catch (error: any) {
      console.error('‚ùå Erreur marquage lu:', error);
      return {
        success: false,
        message: error.message || "Erreur lors du marquage"
      };
    }
  }
}
